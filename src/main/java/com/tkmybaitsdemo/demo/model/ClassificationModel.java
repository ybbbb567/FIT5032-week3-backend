package com.tkmybaitsdemo.demo.model;

import com.tkmybaitsdemo.demo.vo.ClassificationResultVO;
import org.dmg.pmml.FieldName;
import org.dmg.pmml.PMML;
import org.jpmml.evaluator.*;
import org.jpmml.model.PMMLUtil;
import org.springframework.stereotype.Component;
import org.xml.sax.SAXException;

import javax.xml.bind.JAXBException;

import java.io.IOException;
import java.io.InputStream;
import java.math.RoundingMode;
import java.net.IDN;
import java.net.URI;
import java.net.URISyntaxException;
import java.text.DecimalFormat;
import java.util.*;
import java.util.regex.Matcher;
import java.util.regex.Pattern;


/**
 * @author yb
 * @date 2023/03/271600
 **/

@Component
public class ClassificationModel {
    private Evaluator modelEvaluator;

    /**
     * Machine learning models are generated by passing in PMML file paths
     *
     * @param pmmlFileNameInputStream pmml file path
     */
    public ClassificationModel(InputStream pmmlFileNameInputStream) {
        PMML pmml = null;

        try {
            if (pmmlFileNameInputStream != null) {
//                InputStream is = new FileInputStream(pmmlFileNameInputStream);
                pmml = PMMLUtil.unmarshal(pmmlFileNameInputStream);
                try {
                    pmmlFileNameInputStream.close();
                } catch (IOException e) {
                    System.out.println("InputStream close error!");
                }

                ModelEvaluatorFactory modelEvaluatorFactory = ModelEvaluatorFactory.newInstance();

                this.modelEvaluator = (Evaluator) modelEvaluatorFactory.newModelEvaluator(pmml);
                modelEvaluator.verify();
                System.out.println("加载模型成功！");
            }
        } catch (SAXException e) {
            e.printStackTrace();
        } catch (JAXBException e) {
            e.printStackTrace();
        }

    }

    public List<String> getFeatureNames() {
        List<String> featureNames = new ArrayList<String>();

        List<InputField> inputFields = modelEvaluator.getInputFields();

        for (InputField inputField : inputFields) {
            featureNames.add(inputField.getName().toString());
        }
        return featureNames;
    }


    public String getTargetName() {
        return modelEvaluator.getTargetFields().get(0).getName().toString();
    }


    private Map<String, ?> getProbabilityDistribution(Map<FieldName, ?> arguments) {
        Map<FieldName, ?> evaluateResult = modelEvaluator.evaluate(arguments);
//        Map<String, ?> resultRecord =
//        System.out.println(evaluateResult);
        return EvaluatorUtil.decode(evaluateResult);
    }


    public static void main(String[] args) {
        InputStream inputStream = ClassificationModel.class.getClassLoader().getResourceAsStream("decision_tree4.pmml");
        ClassificationModel clf = new ClassificationModel(inputStream);
//0:benign 1:defacement 2:phishing 3:malware
        List<String> featureNames = clf.getFeatureNames();
        System.out.println("feature: " + featureNames);

        Map<FieldName, Number> waitPreSample = new HashMap<>();
        waitPreSample.put(new FieldName("url_length"), 0);
        waitPreSample.put(new FieldName("number_of_letters"), 4 / 53);
        waitPreSample.put(new FieldName("number_of_digits"), 2);
        waitPreSample.put(new FieldName("dotcom"), 10);
        waitPreSample.put(new FieldName("codot"), 0);
        waitPreSample.put(new FieldName("dotnet"), 3);
        waitPreSample.put(new FieldName("upper_case_number"), 40);
        waitPreSample.put(new FieldName("lower_case_number"), 53);
        waitPreSample.put(new FieldName("dot_number"), 40);
        waitPreSample.put(new FieldName("dot_info_number"), 0);
        waitPreSample.put(new FieldName("www_dot_number"), 0);
        waitPreSample.put(new FieldName("not_alphanumeric_number"), 0);
        waitPreSample.put(new FieldName("percentage_number"), 0);
        waitPreSample.put(new FieldName("forward_slash"), 1);


        System.out.println("waitPreSample predict result: " + clf.getProbabilityDistribution(waitPreSample));
//        System.out.println("waitPreSample predict result: " + clf.predict(String.valueOf(waitPreSample)).toString());
//        System.out.println("waitPreSample predictProba result: " + clf.predictProba(waitPreSample).toString());

    }


    public ClassificationResultVO predict(String urlString) throws URISyntaxException {
        InputStream inputStream = getClass().getClassLoader().getResourceAsStream("decision_tree4.pmml");
        ClassificationModel clf = new ClassificationModel(inputStream);
//0:benign 1:defacement 2:phishing 3:malware

        Map<FieldName, Number> waitPreSample = new HashMap<>();

        String regexIp = "(([01]?\\d\\d?|2[0-4]\\d|25[0-5])\\.([01]?\\d\\d?|2[0-4]\\d|25[0-5])\\.([01]?\\d\\d?|2[0-4]\\d|25[0-5])\\." +
                "([01]?\\d\\d?|2[0-4]\\d|25[0-5])\\/)|" +  // IPv4
                "(([01]?\\d\\d?|2[0-4]\\d|25[0-5])\\.([01]?\\d\\d?|2[0-4]\\d|25[0-5])\\.([01]?\\d\\d?|2[0-4]\\d|25[0-5])\\." +
                "([01]?\\d\\d?|2[0-4]\\d|25[0-5])\\/)|" +  // IPv4 with port
                "((0x[0-9a-fA-F]{1,2})\\.(0x[0-9a-fA-F]{1,2})\\.(0x[0-9a-fA-F]{1,2})\\.(0x[0-9a-fA-F]{1,2})\\/)" +  // IPv4 in hexadecimal
                "(?:[a-fA-F0-9]{1,4}:){7}[a-fA-F0-9]{1,4}|" +
                "([0-9]+(?:\\.[0-9]+){3}:[0-9]+)|" +
                "((?:(?:\\d|[01]?\\d\\d|2[0-4]\\d|25[0-5])\\.){3}(?:25[0-5]|2[0-4]\\d|[01]?\\d\\d|\\d)(?:\\/\\d{1,2})?)";

        Pattern patternIp = Pattern.compile(regexIp);
        Matcher matcherIp = patternIp.matcher(urlString);
        int matchResultIp = matcherIp.find() ? 1 : 0;
        waitPreSample.put(new FieldName("having_ip_address"), matchResultIp);


        waitPreSample.put(new FieldName("url_length"), urlString.length());

        String lettersOnly = urlString.replaceAll("[^a-zA-Z]", "");
        waitPreSample.put(new FieldName("number_of_letters"), lettersOnly.length());

        String digitsOnly = urlString.replaceAll("\\D", "");
        waitPreSample.put(new FieldName("number_of_digits"), digitsOnly.length());

        String[] dotcomOnly = urlString.split("\\.com");
        waitPreSample.put(new FieldName("dotcom"), dotcomOnly.length - 1);

        String[] codotOnly = urlString.split("co\\.");
        waitPreSample.put(new FieldName("codot"), codotOnly.length - 1);

        String[] dotnet = urlString.split("\\.net");
        waitPreSample.put(new FieldName("dotnet"), dotnet.length - 1);

        String uppercaseOnly = urlString.replaceAll("[^A-Z]", "");
        waitPreSample.put(new FieldName("upper_case_number"), uppercaseOnly.length());

        String lowercaseOnly = urlString.replaceAll("[^a-z]", "");
        waitPreSample.put(new FieldName("lower_case_number"), lowercaseOnly.length());

        String[] dotOnly = urlString.split("\\.");
        waitPreSample.put(new FieldName("dot_number"), dotOnly.length - 1);

        String[] dotInfoOnly = urlString.split("\\.info");
        waitPreSample.put(new FieldName("dot_info_number"), dotInfoOnly.length - 1);

        String[] wwwdotOnly = urlString.split("www\\.");
        waitPreSample.put(new FieldName("www_dot_number"), wwwdotOnly.length - 1);

        String symbolOnly = urlString.replaceAll("[^a-zA-Z0-9]", "");
        waitPreSample.put(new FieldName("not_alphanumeric_number"), symbolOnly.length());

        String[] percentageOnly = urlString.split("%");
        waitPreSample.put(new FieldName("percentage_number"), percentageOnly.length - 1);

        String[] slashOnly = urlString.split("/");
        waitPreSample.put(new FieldName("forward_slash"), slashOnly.length - 1);

        String[] doubleslashOnly = urlString.split("//");
        waitPreSample.put(new FieldName("count_dir"), doubleslashOnly.length - 1);

        String regexShort = "bit\\.ly|goo\\.gl|shorte\\.st|go2l\\.ink|x\\.co|ow\\.ly|t\\.co|tinyurl|tr\\.im|is\\.gd|cli\\.gs|"
                + "yfrog\\.com|migre\\.me|ff\\.im|tiny\\.cc|url4\\.eu|twit\\.ac|su\\.pr|twurl\\.nl|snipurl\\.com|"
                + "short\\.to|BudURL\\.com|ping\\.fm|post\\.ly|Just\\.as|bkite\\.com|snipr\\.com|fic\\.kr|loopt\\.us|"
                + "doiop\\.com|short\\.ie|kl\\.am|wp\\.me|rubyurl\\.com|om\\.ly|to\\.ly|bit\\.do|t\\.co|lnkd\\.in|"
                + "db\\.tt|qr\\.ae|adf\\.ly|goo\\.gl|bitly\\.com|cur\\.lv|tinyurl\\.com|ow\\.ly|bit\\.ly|ity\\.im|"
                + "q\\.gs|is\\.gd|po\\.st|bc\\.vc|twitthis\\.com|u\\.to|j\\.mp|buzurl\\.com|cutt\\.us|u\\.bb|yourls\\.org|"
                + "x\\.co|prettylinkpro\\.com|scrnch\\.me|filoops\\.info|vzturl\\.com|qr\\.net|1url\\.com|tweez\\.me|v\\.gd|"
                + "tr\\.im|link\\.zip\\.net";

        Pattern patternShort = Pattern.compile(regexShort);
        Matcher matcherShort = patternShort.matcher(urlString);
        int matchResultShort = matcherShort.find() ? 1 : 0;
        waitPreSample.put(new FieldName("short_url"), matchResultShort);

        String[] httpOnly = urlString.split("http");
        waitPreSample.put(new FieldName("count-http"), httpOnly.length - 1);

        String[] httpsOnly = urlString.split("https");
        waitPreSample.put(new FieldName("https_number"), httpsOnly.length - 1);

        String[] questionOnly = urlString.split("\\?");
        waitPreSample.put(new FieldName("count?"), questionOnly.length - 1);

        String[] minusOnly = urlString.split("-");
        waitPreSample.put(new FieldName("count-"), minusOnly.length - 1);

        String[] equalOnly = urlString.split("=");
        waitPreSample.put(new FieldName("count="), equalOnly.length - 1);


        String regexSus = "bit\\.ly|goo\\.gl|shorte\\.st|go2l\\.ink|x\\.co|ow\\.ly|t\\.co|tinyurl|tr\\.im|is\\.gd|cli\\.gs|"
                + "yfrog\\.com|migre\\.me|ff\\.im|tiny\\.cc|url4\\.eu|twit\\.ac|su\\.pr|twurl\\.nl|snipurl\\.com|"
                + "short\\.to|BudURL\\.com|ping\\.fm|post\\.ly|Just\\.as|bkite\\.com|snipr\\.com|fic\\.kr|loopt\\.us|"
                + "doiop\\.com|short\\.ie|kl\\.am|wp\\.me|rubyurl\\.com|om\\.ly|to\\.ly|bit\\.do|t\\.co|lnkd\\.in|"
                + "db\\.tt|qr\\.ae|adf\\.ly|goo\\.gl|bitly\\.com|cur\\.lv|tinyurl\\.com|ow\\.ly|bit\\.ly|ity\\.im|"
                + "q\\.gs|is\\.gd|po\\.st|bc\\.vc|twitthis\\.com|u\\.to|j\\.mp|buzurl\\.com|cutt\\.us|u\\.bb|yourls\\.org|"
                + "x\\.co|prettylinkpro\\.com|scrnch\\.me|filoops\\.info|vzturl\\.com|qr\\.net|1url\\.com|tweez\\.me|v\\.gd|"
                + "tr\\.im|link\\.zip\\.net";

        Pattern patternSus = Pattern.compile(regexSus);
        Matcher matcherSus = patternSus.matcher(urlString);
        int matchResultSus = matcherSus.find() ? 1 : 0;
        waitPreSample.put(new FieldName("sus_url"), matchResultSus);

        if (!urlString.startsWith("http://") && !urlString.startsWith("https://")) {
            urlString = "http://" + urlString;
        }
        URI uri = new URI(urlString);
        String hostname = uri.getHost();
        String regexAbnormal = Pattern.quote(hostname);
        Pattern patternAbnormal = Pattern.compile(regexAbnormal);
        Matcher matcherAbnormal = patternAbnormal.matcher(urlString);
        int matchResultAbnormal = matcherAbnormal.find() ? 1 : 0;
        waitPreSample.put(new FieldName("abnormal_url"), matchResultAbnormal);

        waitPreSample.put(new FieldName("hostname_length"), hostname.length());

        // Convert the hostname to ASCII using IDN
        String asciiHost = IDN.toASCII(hostname);
        // Split the hostname into parts separated by dots
        String[] parts = asciiHost.split("\\.");
        waitPreSample.put(new FieldName("tld_length"), parts[parts.length - 1].length());

        String[] pathSegments = uri.getPath().split("/");
        waitPreSample.put(new FieldName("fd_length"), pathSegments.length > 1 ? pathSegments[1].length() : 0);


        Map<String, ?> resultMap = clf.getProbabilityDistribution(waitPreSample);
        ClassificationResultVO resultVO = new ClassificationResultVO();
        Integer categoryNum = (Integer) resultMap.get("Category");
        switch (categoryNum) {
            case 0:
                resultVO.setCategory("benign");
                break;
            case 1:
                resultVO.setCategory("defacement");
                break;
            case 2:
                resultVO.setCategory("phishing");
                break;
            case 3:
                resultVO.setCategory("malware");
                break;
            default:
                resultVO.setCategory(null);
                break;
        }
        DecimalFormat df = new DecimalFormat("#.##");
        df.setRoundingMode(RoundingMode.HALF_UP);
        resultVO.setProb0(df.format(Double.parseDouble(resultMap.get("probability(0)").toString())));
        resultVO.setProb1(df.format(Double.parseDouble(resultMap.get("probability(1)").toString())));
        resultVO.setProb2(df.format(Double.parseDouble(resultMap.get("probability(2)").toString())));
        resultVO.setProb3(df.format(Double.parseDouble(resultMap.get("probability(3)").toString())));
        return resultVO;
    }

}